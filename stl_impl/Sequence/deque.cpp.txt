#include <iostream>
#include <stdexcept>

template<typename T>
class Deque {
private:
    T* data;
    int capacity;
    int size;
    int front;
    int back;

    void resize() {
        int new_capacity = capacity * 2;
        T* new_data = new T[new_capacity];
        int j = 0;
        for (int i = front; i < capacity; ++i) {
            new_data[j++] = data[i];
        }
        for (int i = 0; i < back; ++i) {
            new_data[j++] = data[i];
        }
        delete[] data;
        data = new_data;
        front = 0;
        back = size;
        capacity = new_capacity;
    }

public:
    Deque(int initial_capacity = 10) : capacity(initial_capacity), size(0), front(0), back(0) {
        data = new T[capacity];
    }

    ~Deque() {
        delete[] data;
    }

    
    T& at(int index) {
        if (index < 0 || index >= size) {
            throw std::out_of_range("Index out of range");
        }
        return data[(front + index) % capacity];
    }

    const T& at(int index) const {
        if (index < 0 || index >= size) {
            throw std::out_of_range("Index out of range");
        }
        return data[(front + index) % capacity];
    }

  
    T& operator[](int index) {
        return data[(front + index) % capacity];
    }

    const T& operator[](int index) const {
        return data[(front + index) % capacity];
    }

    Deque& operator=(const Deque& other) {
        if (this != &other) {
            delete[] data;

            capacity = other.capacity;
            size = other.size;
            front = other.front;
            back = other.back;

            data = new T[capacity];
            for (int i = 0; i < size; ++i) {
                data[(front + i) % capacity] = other.data[(other.front + i) % capacity];
            }
        }
        return *this;
    }

    void assign(int count, const T& value) {
        if (count > capacity) {
            delete[] data;
            capacity = count;
            data = new T[capacity];
        }
        size = count;
        front = 0;
        back = count;

        for (int i = 0; i < count; ++i) {
            data[i] = value;
        }
    }

    void push_front(const T& value) {
        if (size == capacity) {
            resize();
        }
        front = (front - 1 + capacity) % capacity;
        data[front] = value;
        ++size;
    }

    void push_back(const T& value) {
        if (size == capacity) {
            resize();
        }
        data[back] = value;
        back = (back + 1) % capacity;
        ++size;
    }

    void pop_front() {
        if (size == 0) {
            throw std::out_of_range("Deque is empty");
        }
        front = (front + 1) % capacity;
        --size;
    }

    void pop_back() {
        if (size == 0) {
            throw std::out_of_range("Deque is empty");
        }
        back = (back - 1 + capacity) % capacity;
        --size;
    }

    T& get_front() {
        if (size == 0) {
            throw std::out_of_range("Deque is empty");
        }
        return data[front];
    }

    T& get_back() {
        if (size == 0) {
            throw std::out_of_range("Deque is empty");
        }
        return data[(back - 1 + capacity) % capacity];
    }

    int get_size() const {
        return size;
    }

    bool is_empty() const {
        return size == 0;
    }
};

int main() {
    Deque<int> dq;


    return 0;
}
