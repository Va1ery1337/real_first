#include <iostream>
#include <stdexcept>
#include <initializer_list>
#include <string>


class MyException : public std::exception {
private:
    std::string message;

public:
    explicit MyException(const std::string& msg) : message(msg) {}

    virtual const char* what() const noexcept override {
        return message.c_str();
    }
};

template <typename T>
class Vector {
private:
    T* elems = nullptr;
    int size = 0;
    int capacity = 0;

public:
    Vector() : elems(nullptr), size(0), capacity(0) {}

    ~Vector() {
        delete[] elems;
    }

    Vector(std::initializer_list<T> init_list) {
        size = init_list.size();
        capacity = size;
        if (capacity > 0) {
            elems = new T[capacity];
            int index = 0;
            for (const T& elem : init_list) {
                elems[index++] = elem;
            }
        }
    }

    void resize(int new_capacity) {
        T* new_elems = new T[new_capacity];
        for (int i = 0; i < size; ++i) {
            new_elems[i] = elems[i];
        }
        delete[] elems;
        elems = new_elems;
        capacity = new_capacity;
    }

    void insert(int index, const T& value) {
        if (index > size || index < 0) {
            throw MyException("Index out of range");
        }
        if (capacity == size) {
            resize(capacity == 0 ? 1 : capacity * 2);
        }
        for (int i = size; i > index; --i) {
            elems[i] = elems[i - 1];
        }
        elems[index] = value;
        ++size;
    }

    void push_back(const T& value) {
        if (size == capacity) {
            resize(capacity == 0 ? 1 : capacity * 2);
        }
        elems[size++] = value;
    }

    void push_front(const T& value) {
        if (size == capacity) {
            resize(capacity == 0 ? 1 : capacity * 2);
        }
        for (int i = size; i > 0; --i) {
            elems[i] = elems[i - 1];
        }
        elems[0] = value;
        ++size;
    }

    void pop_back() {
        if (size > 0) {
            --size;
        }
        else {
            std::cout << "empty vector" << std::endl;
        }
    }

    void pop_front() {
        if (size > 0) {
            for (int i = 0; i < size - 1; ++i) {
                elems[i] = elems[i + 1];
            }
            --size;
        }
        else {
            std::cout << "empty vector" << std::endl;
        }
    }

    void assign(int _size, const T& value) {
        if (_size > capacity) {
            resize(_size * 2);
        }
        size = _size;
        for (int i = 0; i < size; ++i) {
            elems[i] = value;
        }
    }

    T& operator[](int index) {
        if (index >= size || index < 0) {
            throw MyException("Index out of range");
        }
        return elems[index];
    }

    T& at(int index) {
        if (index >= size || index < 0) {
            throw MyException("Index out of range");
        }
        return elems[index];
    }

    void Print() const {
        for (int i = 0; i < size; ++i) {
            std::cout << elems[i] << " ";
        }
        std::cout << std::endl;
    }

    int GetSize() const {
        return size;
    }

    int GetCapacity() const {
        return capacity;
    }
};

int main() {
    Vector<int> vec = { 1, 2, 3, 4, 5 };

    vec.Print();

    try {
        std::cout << "Elem at index 2: " << vec.at(2) << std::endl;
        std::cout << "Elem at index 5: " << vec.at(5) << std::endl;
    }
    catch (const MyException& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
    }

    return 0;
}
