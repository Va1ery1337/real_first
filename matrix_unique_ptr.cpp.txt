#include <iostream>
#include <memory>
#include <stdexcept>
#include <ctime>

class Matrix {

private:
    int m_rows;
    int m_cols;
    std::unique_ptr<std::unique_ptr<int[]>[]> elems;

public:
    Matrix(int rows, int cols)
        : m_rows(rows), m_cols(cols), elems(std::make_unique<std::unique_ptr<int[]>[]>(rows)) {
        for (int i = 0; i < rows; ++i) {
            elems[i] = std::make_unique<int[]>(cols);
        }
    }
    ~Matrix() = default;

    Matrix(const Matrix& other): 
          m_rows(other.m_rows), 
          m_cols(other.m_cols),
          elems(std::make_unique<std::unique_ptr<int[]>[]>(other.m_rows))
    {
        for (int i = 0; i < m_rows; ++i) {
            elems[i] = std::make_unique<int[]>(m_cols);
            for (int j = 0; j < m_cols; ++j) {
                elems[i][j] = other.elems[i][j];
            }
        }
    }
    Matrix& operator=(const Matrix& other) {
        if (this == &other) {
            return *this;
        }
        m_rows = other.m_rows;
        m_cols = other.m_cols;
        elems = std::make_unique<std::unique_ptr<int[]>[]>(m_rows);
        for (int i = 0; i < m_rows; ++i) {
            elems[i] = std::make_unique<int[]>(m_cols);
            for (int j = 0; j < m_cols; ++j) {
                elems[i][j] = other.elems[i][j];
            }
        }
        return *this;
    }


    int& operator()(int row, int col) {
        if (row >= m_rows || col >= m_cols) {
            throw std::out_of_range("Index out of range");
        }
        return elems[row][col];
    }

    const int& operator()(int row, int col) const {
        if (row >= m_rows || col >= m_cols) {
            throw std::out_of_range("Index out of range");
        }
        return elems[row][col];
    }

    

    void Print() const {
        for (int i = 0; i < m_rows; ++i) {
            for (int j = 0; j < m_cols; ++j) {
                std::cout << elems[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
    int GetRows() const { 
        return m_rows;
    }
    int GetCols() const { 
        return m_cols;
    }

};

int main() {
    srand(time(NULL));
    Matrix matrix1(3, 3);
    for (int i = 0; i < matrix1.GetRows(); ++i) {
        for (int j = 0; j < matrix1.GetCols(); ++j) {
            matrix1(i, j) = rand() % 10;
        }
    }
    matrix1.Print();

    return 0;
}