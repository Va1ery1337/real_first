#include <iostream>
#include <vector>
#include <queue>
#include <ctime>

template <typename T>
struct Node
{
    std::vector<Node<T>*> children;
    T val;

    void addChild(Node<T>* child)
    {
        children.push_back(child);
    }

    Node(T val) : val(val) {}
};

template <typename T>
struct Tree
{
    Node<T>* root;

    Tree(Node<T>* root) : root(root) {}

    void traverse()
    {
        if (!root) return;

        std::queue<Node<T>*> q;
        q.push(root);

        while (!q.empty()) {
            int levelSize = q.size();

            for (int i = 0; i < levelSize; ++i) {
                auto* temp = q.front();
                q.pop();

                std::cout << temp->val << " ";

                for (auto* child : temp->children) {
                    q.push(child);
                }
            }
            std::cout << std::endl;
        }
    }
};

template <typename T>
Node<T>* RandomTree(int depth) {
    if (depth < 0) return nullptr;

    std::queue<Node<T>*> q;
    Node<T>* root = new Node<T>(rand() % 50);
    std::cout << "root: " << root->val << std::endl;
    q.push(root);

    while (depth > 0 && !q.empty()) {
        int levelSize = q.size();

        for (int i = 0; i < levelSize; ++i) {
            auto* temp = q.front();
            q.pop();

            int numChildren = rand() % 5;
            std::cout << "Number of children for " << temp->val << ": " << numChildren << std::endl;
            for (int j = 0; j < numChildren; ++j) {
                Node<T>* child = new Node<T>(rand() % 50);
                std::cout << "Child of " << temp->val << ": " << child->val << std::endl;
                temp->addChild(child);
                q.push(child);
            }
        }

        --depth;
    }

    return root;
}

int main()
{
    std::srand(static_cast<unsigned int>(std::time(0)));

    int depth = 5;
    Node<int>* root = RandomTree<int>(depth);
    Tree<int> tree(root);

    std::cout << "Tree structure (level by level):" << std::endl;
    tree.traverse();

    return 0;
}
